# Note the node:slim image doesn't have node-gyp
FROM resin/%%RESIN_MACHINE_NAME%%-node

# Enable systemd init system in container
ENV INITSYSTEM on

#!/bin/dash
RUN wget ftp://ftp.fu-berlin.de/unix/languages/gcc/releases/gcc-6.3.0/gcc-6.3.0.tar.bz2 \
&& tar xf gcc-6.3.0.tar.bz2 \
&& cd gcc-6.3.0 \
&& contrib/download_prerequisites \
&& mkdir obj \
&& cd obj \

# for Pi3 and new Pi2
&& ../configure -v --enable-languages=c,c++ --with-cpu=cortex-a53 \
  --with-fpu=neon-fp-armv8 --with-float=hard --build=arm-linux-gnueabihf \

# install deps
RUN apt-get update && apt-get install -y --no-install-recommends \
    arduino \
    usbutils \
    make

# Defines our working directory in container
WORKDIR /usr/src/app

# This will copy all files in our root to the working  directory in the container
COPY . ./

ENV ARDUINODIR /usr/share/arduino
ENV BOARD uno

RUN cd /usr/share/arduino/libraries && git clone https://github.com/adafruit/RGB-matrix-Panel.git && mv RGB-matrix-Panel RGBmatrixPanel
RUN cd /usr/share/arduino/libraries && git clone https://github.com/adafruit/Adafruit-GFX-Library.git && mv Adafruit-GFX-Library Adafruit_GFX && cd Adafruit_GFX && rm Adafruit_SPITFT.cpp Adafruit_SPITFT.h

RUN cd arduino && make

# Copies the xxx.json first for better cache on later pushes
COPY package.json package.json
COPY package-lock.json package-lock.json

# This install npm dependencies on the resin.io build server,
# making sure to clean up the artifacts it creates in order to reduce the image size.
RUN JOBS=MAX npm install --production --unsafe-perm #&& npm cache clean --force && rm -rf /tmp/*

# run start.sh when the container starts
CMD ["bash","start.sh"]